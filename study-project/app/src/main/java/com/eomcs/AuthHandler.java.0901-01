package com.eomcs.pms.handler; // getLoginUser()으로 만든 이유?

import java.util.List;
import com.eomcs.pms.domain.Member;
import com.eomcs.util.Prompt;

public class AuthHandler {

  List<Member> memberList;

  // 직접 필드에 안 하고 getter() 메서드를 사용하냐?
  // 유지보수에 낫기 때문
  // => projectHandler에서도 add()의 setOwner에서 (AuthHandler.getLoginUser())를
  // => project.setOwner(AuthHandler.loginUser)라고 해도 무방하다.
  // => 초보자는 별 차이를 못 느끼기 때문
  static Member loginUser;
  public static Member getLoginUser() {
    return loginUser;
  }

  public AuthHandler(List<Member> memberList) {
    this.memberList = memberList;
  }


  public void login() {
    System.out.println("[로그인]");

    String email = Prompt.inputString("이메일? ");
    String password = Prompt.inputString("암호? ");

    Member member = findByEmailPassword(email, password);

    if (member == null) {
      System.out.println("이메일과 암호가 일치하는 회원을 찾을 수 없습니다.");
    } else { // 만약에 찾았다면
      System.out.printf("%s님 환영합니다!\n", member.getName());
      loginUser = member;
    }
  }

  public void displayLoginUser() {
    System.out.println("[내 정보]");

    if (loginUser == null) {
      System.out.println("로그인 하지 않았습니다.");
      return;
    }

    System.out.printf("이름: %s\n", loginUser.getName());
    System.out.printf("이메일: %s\n", loginUser.getEmail());
    System.out.printf("사진: %s\n", loginUser.getPhoto());
    System.out.printf("전화: %s\n", loginUser.getTel());
    System.out.printf("등록일: %s\n", loginUser.getRegisteredDate());
  }

  public void logout() {
    System.out.println("[로그아웃]");

    loginUser = null;
    System.out.println("로그아웃 하였습니다.");
  }

  // ** for문의 memberList 즉, List는 Iterable 구현체이다.
  private Member findByEmailPassword(String email, String password) {
    for (Member member : memberList) {
      if (member.getEmail().equalsIgnoreCase(email) && 
          member.getPassword().equals(password)) { // 암호는 대소문자 구문 필요
        return member; // 같으면 member 리턴하라
      }
    }
    return null; // 그 밖에는 null을 리턴하라
  }
}






