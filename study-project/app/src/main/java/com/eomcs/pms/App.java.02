package com.eomcs.pms;

import com.eomcs.pms.handler.BoardHandler;
import com.eomcs.pms.handler.MemberHandler;
import com.eomcs.pms.handler.ProjectHandler;
import com.eomcs.pms.handler.TaskHandler;
import com.eomcs.pms.menu.MemberAddMenu;
import com.eomcs.pms.menu.MemberDeleteMenu;
import com.eomcs.pms.menu.MemberDetailMenu;
import com.eomcs.pms.menu.MemberListMenu;
import com.eomcs.pms.menu.MemberUpdateMenu;
import com.eomcs.pms.menu.Menu;
import com.eomcs.pms.menu.MenuGroup;
import com.eomcs.pms.menu.ProjectAddMenu;
import com.eomcs.pms.menu.ProjectDeleteMenu;
import com.eomcs.pms.menu.ProjectDetailMenu;
import com.eomcs.pms.menu.ProjectListMenu;
import com.eomcs.pms.menu.ProjectUpdateMenu;
import com.eomcs.pms.menu.TaskAddMenu;
import com.eomcs.pms.menu.TaskDeleteMenu;
import com.eomcs.pms.menu.TaskDetailMenu;
import com.eomcs.pms.menu.TaskListMenu;
import com.eomcs.pms.menu.TaskUpdateMenu;
import com.eomcs.util.Prompt;

// 1) 메인 메뉴를 출력하고 번호를 입력 받는다. (강사님 App.java.01)
//      - 0 번을 입력하면 프로그램을 종료한다.
// 2) 게시판 메뉴를 출력하고 번호를 입력 받는다. (강사님 App.java.02)
//      - 사용자가 입력한 메뉴 번호에 따라 실행할 명령어를 설정한다.
// 3) 회원/프로젝트/작업 메뉴를 출력하고 번호를 입력 받는다. (강사님 App.java.03)
//      - 사용자가 입력한 메뉴 번호에 따라 실행할 명령어를 설정한다.
// 4) 메뉴 번호를 입력했을 때 해당 기능을 바로 실행하게 한다. (강사님 App.java.04)
// 5) 각각의 메인 메뉴를 다루는 코드를 별도의 메서드로 추출한다. -> 유지보수하기 좋게 (강사님 App.java.05)
//      - doBoardMenu 메서드 정의
//      - doMemberMenu 메서드 정의
//      - doProjectMenu 메서드 정의
//      - doTaskMenu 메서드 정의
//      - doMainMenu 메서드 정의

public class App2 {

  // main() 메서드와 doXxxMenu() 메서드가 공유하는 변수는
  // 같은 스태틱 멤버로 만든다. => **main() 메서드와 doXxx() 메서드 둘 다 static 메서드라서**
  static BoardHandler boardHandler = new BoardHandler();
  static MemberHandler memberHandler = new MemberHandler();
  static ProjectHandler projectHandler = new ProjectHandler(memberHandler);
  static TaskHandler taskHandler = new TaskHandler(memberHandler);

  // 위 코드는 아래 코드처럼 변환이 되며 같은 뜻이다.
  //  static BoardHandler boardHandler;
  //  
  //  static {
  //    boardHandler = new BoardHandler();
  //    memberHandler = new MemberHandler();
  //    projectHandler = new ProjectHandler(memberHandler);
  //    taskHandler = new TaskHandler(memberHandler);
  //  } 

  public static void main(String[] args) {

    Menu mainMenu = createMenu();
    mainMenu.execute();

    Prompt.close();
  }

  static Menu createMenu() {
    MenuGroup mainMenuGroup = new MenuGroup("메인");
    mainMenuGroup.setPrevMenuTitle("종료");

    MenuGroup boardMenu = new MenuGroup("게시판"); // 이전 메뉴로 가라
    mainMenuGroup.add(boardMenu);

    // 로컬 클래스 -> createMenu 안에서만 사용 가능하지만 굳이 BoardAddMenu.java(지금은 삭제)처럼 밖에 둘 필요 없다.
    // 이름이 없는 클래스 - 해당 클래스 ex) 메뉴를 상속 받았으니까 인스턴스가 뭔지 몰라도 Menu 객체이다
    // 이름이 없는 클래스이기 때문에 class extends 지워도 됨
    // 이름이 없는 클래스는 바로 new 호출해 줘야 하고, 생성자는 수퍼 클래스(ex.super("변경");) 생성자를 호출해 줌
    Menu menu = new Menu("등록") {
      // 중첩 클래스가 되는 순간 굳이 생성자 boardHandler에서 받지 않아도 된다
      // 익명 클래스를 정의하자마자 바로 인스턴스를 생성하고 } 뒤에 ; 찍어야 함
      // --> 인스턴스를 바로 생성해야 하므로 인스턴스 여러 개 못 만든다
      @Override
      public void execute() {
        boardHandler.add();
      }
    };
    boardMenu.add(menu);

    boardMenu.add(new Menu("목록") {
      public void execute() {
        boardHandler.list();
      }
    });

    boardMenu.add(new Menu("상세보기") {
      public void execute() {
        boardHandler.detail();
      }
    });

    boardMenu.add(new Menu("변경") {
      public void execute() {
        boardHandler.update();
      }
    });

    boardMenu.add(new Menu("삭제") {
      public void execute() {
        boardHandler.delete();
      }
    });

    MenuGroup memberMenu = new MenuGroup("회원"); // 이전 메뉴로 가라
    mainMenuGroup.add(memberMenu);

    memberMenu.add(new MemberAddMenu(memberHandler));
    memberMenu.add(new MemberListMenu(memberHandler));
    memberMenu.add(new MemberDetailMenu(memberHandler));
    memberMenu.add(new MemberUpdateMenu(memberHandler));
    memberMenu.add(new MemberDeleteMenu(memberHandler));

    MenuGroup projectMenu = new MenuGroup("프로젝트"); // 이전 메뉴로 가라
    mainMenuGroup.add(projectMenu);

    projectMenu.add(new ProjectAddMenu(projectHandler));
    projectMenu.add(new ProjectListMenu(projectHandler));
    projectMenu.add(new ProjectDetailMenu(projectHandler));
    projectMenu.add(new ProjectUpdateMenu(projectHandler));
    projectMenu.add(new ProjectDeleteMenu(projectHandler));

    MenuGroup taskMenu = new MenuGroup("작업"); // 이전 메뉴로 가라
    mainMenuGroup.add(taskMenu);

    taskMenu.add(new TaskAddMenu(taskHandler));
    taskMenu.add(new TaskListMenu(taskHandler));
    taskMenu.add(new TaskDetailMenu(taskHandler));
    taskMenu.add(new TaskUpdateMenu(taskHandler));
    taskMenu.add(new TaskDeleteMenu(taskHandler));

    return mainMenuGroup;
  }

}












