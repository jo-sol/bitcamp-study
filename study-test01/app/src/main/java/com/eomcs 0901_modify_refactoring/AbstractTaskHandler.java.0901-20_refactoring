package com.eomcs.pms.handler;

import com.eomcs.pms.domain.Project;
import com.eomcs.pms.domain.Task;
import com.eomcs.util.Prompt;

public abstract class AbstractTaskHandler {

  protected AbstractProjectHandler projectHandler;

  public AbstractTaskHandler(AbstractProjectHandler projectHandler) {
    this.projectHandler = projectHandler;
  }

  // [printTasks 리펙토링]
  // 인스턴스 필드를 사용하지 않음
  // 파라미터를 받아서 출력하는 일만 하기 때문에 static으로 변경

  protected static void printTasks(Project project) {
    System.out.printf("%s:\n\n", project.getTitle());
    for (Task task : project.getTasks()) {
      System.out.printf("%d, %s, %s, %s, %s\n",
          task.getNo(), 
          task.getContent(), 
          task.getDeadline(), 
          getStatusLabel(task.getStatus()), 
          task.getOwner().getName());
    }
  }

  protected static String getStatusLabel(int status) {
    switch (status) {
      case 1: return "진행중";
      case 2: return "완료";
      default: return "신규";
    }
  }

  protected static int promptStatus() {
    return promptStatus(-1);
  }

  protected static int promptStatus(int status) {
    if (status == -1) {
      System.out.println("상태?");
    } else {
      System.out.printf("상태(%s)?\n", getStatusLabel(status));
    }
    System.out.println("0: 신규");
    System.out.println("1: 진행중");
    System.out.println("2: 완료");
    return Prompt.inputInt("> ");
  }

  // [Task findByNo 리팩토링] - 프로젝트에서 특정 작업을 조회하는 메서드를 이동한다
  // >> Project에서 이미 다루고 있음
  // >> Project 클래스로 이동
  //  protected static Task findByNo(Project project, int taskNo) {
  //    for (Task task : project.getTasks()) {
  //      if (task.getNo() == taskNo) {
  //        return task;
  //      }
  //    }
  //    return null;
  //  }

}





